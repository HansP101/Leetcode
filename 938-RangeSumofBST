/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int sum;
    int rangeSumBST(TreeNode* root, int low, int high) {
        DFShelper(root, low, high, sum);
        return sum;
    }
    void DFShelper(TreeNode* root, int low, int high, int &sum){
        if(root==nullptr) return;
        if(root->val>=low and root->val<=high) sum+=root->val;
        if(root->left) DFShelper(root->left, low, high, sum);
        if(root->right) DFShelper(root->right, low, high, sum);
    }
};

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int rangeSumBST(TreeNode* root, int low, int high) {
        int ans=0;
        traverse(root, low, high, ans);
        return ans;
    }
    void traverse(TreeNode* node, int low, int high, int& ans){
        if (node==nullptr) return;
        if(node->val> high) traverse(node->left, low, high, ans);
        else if(node->val<low) traverse(node->right, low, high, ans);
        else{
            ans+=node->val;
            traverse(node->left, low, high, ans);
            traverse(node->right, low, high, ans);
        }
    }
};

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int rangeSumBST(TreeNode* root, int low, int high) {
        int ans=0;
        queue<TreeNode*> TreeQ;
        TreeQ.push(root);
        while(!TreeQ.empty()){
            auto qout=TreeQ.front();
            TreeQ.pop();
            if (qout->val>high and qout->left) TreeQ.push(qout->left);
            else if (qout->val<low and qout->right) TreeQ.push(qout->right);
            else{
                if(qout->val>=low and qout->val<=high) ans+=qout->val;
                if(qout->left) TreeQ.push(qout->left);
                if(qout->right) TreeQ.push(qout->right);
            }
        }
        return ans;
    }
};
